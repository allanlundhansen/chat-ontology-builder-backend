---
description: 
globs: 
alwaysApply: true
---
# AI Rules for 

Look into the foundation directory in the root of the project to read the FullPaper.md which describes in depth the entire project, this is the backend to this described project, it is a vast project.

## Coding practices

### Guidelines for Documentation

#### AI Decision Log

- Update relevant documentation in /docs when modifying features
- Keep README.md in sync with new capabilities
- Maintain changelog entries in CHANGELOG.md

#### Swagger/OpenAPI

- Define comprehensive schemas for all request and response objects
- Use semantic versioning in API paths to maintain backward compatibility
- Implement detailed descriptions for endpoints, parameters, and {{domain_specific_concepts}}
- Configure security schemes to document authentication and authorization requirements
- Use tags to group related endpoints by resource or functional area
- Implement examples for all endpoints to facilitate easier integration by consumers


### Guidelines for Version Control

#### GitHub

- Use pull request templates to standardize information provided for code reviews
- Implement branch protection rules for {{protected_branches}} to enforce quality checks
- Configure required status checks to prevent merging code that fails tests or linting
- Use GitHub Actions for CI/CD workflows to automate testing and deployment
- Implement CODEOWNERS files to automatically assign reviewers based on code paths
- Use GitHub Projects for tracking work items and connecting them to code changes


### Guidelines for Architecture

#### Architecture Decision Records

- Create ADRs in /docs/adr/{name}.md for:
- 1) Major dependency changes
- 2) Architectural pattern changes
- 3) New integration patterns
- 4) Database schema changes

#### Clean Architecture

- Strictly separate code into layers: entities, use cases, interfaces, and frameworks
- Ensure dependencies point inward, with inner layers having no knowledge of outer layers
- Implement domain entities that encapsulate {{business_rules}} without framework dependencies
- Use interfaces (ports) and implementations (adapters) to isolate external dependencies
- Create use cases that orchestrate entity interactions for specific business operations
- Implement mappers to transform data between layers to maintain separation of concerns

#### Domain-Driven Design

- Define bounded contexts to separate different parts of the domain with clear boundaries
- Implement ubiquitous language within each context to align code with business terminology
- Create rich domain models with behavior, not just data structures, for {{core_domain_entities}}
- Use value objects for concepts with no identity but defined by their attributes
- Implement domain events to communicate between bounded contexts
- Use aggregates to enforce consistency boundaries and transactional integrity


## Backend

### Guidelines for Python

#### FastAPI

- Use Pydantic models for request and response validation with strict type checking and custom validators
- Implement dependency injection for services and database sessions to improve testability and resource management
- Use async endpoints for I/O-bound operations to improve throughput for {{high_load_endpoints}}
- Leverage FastAPI's background tasks for non-critical operations that don't need to block the response
- Implement proper exception handling with HTTPException and custom exception handlers for {{error_scenarios}}
- Use path operation decorators consistently with appropriate HTTP methods (GET for retrieval, POST for creation, etc.)


## Database

### Guidelines for Graph

#### Neo4j

- Use parameterized Cypher queries to prevent injection attacks
- Implement proper indexing on node properties used in WHERE clauses for {{node_types}}
- Use the APOC library for common operations not covered by Cypher


## DevOps

### Guidelines for CI/CD

#### GitHub Actions

- Use actions/checkout@v4 to checkout code
- Use actions/setup-node@v4 to setup Node.js
- Use actions/setup-python@v5 to setup Python
- Use actions/setup-java@v4 to setup Java
- Use actions/setup-go@v5 to setup Go
- Use composite actions to reuse workflow steps across different workflows
- Implement caching for dependencies to speed up builds
- Use matrix builds for testing across {{platform_versions}}


## Testing

### Guidelines for Unit Testing

#### PyTest

- Use fixtures for test setup and dependency injection
- Implement parameterized tests for testing multiple inputs for {{function_types}}
- Use monkeypatch for mocking dependencies


